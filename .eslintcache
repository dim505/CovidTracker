[{"C:\\scratch\\CovidTracker\\CovidTracker\\src\\index.js":"1","C:\\scratch\\CovidTracker\\CovidTracker\\src\\App.js":"2","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\appState.js":"3","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\ApiCall.js":"4","C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\BottomSlider\\current\\SummaryOverview.js":"5","C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\BottomSlider\\Historical\\HistoricalSummaryBoard.js":"6","C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\TopSlider\\SwitchMode.js":"7","C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\BottomSlider\\current\\SummaryTotal.js":"8","C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\BottomSlider\\current\\SummaryGeneral.js":"9","C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\BottomSlider\\Historical\\DateSlider.js":"10","C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\Map.js":"11","C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\Circles.js":"12"},{"size":230,"mtime":1614359664000,"results":"13","hashOfConfig":"14"},{"size":5704,"mtime":1614948458587,"results":"15","hashOfConfig":"14"},{"size":2176,"mtime":1615116034975,"results":"16","hashOfConfig":"14"},{"size":963,"mtime":1614359664000,"results":"17","hashOfConfig":"14"},{"size":2082,"mtime":1614946257806,"results":"18","hashOfConfig":"14"},{"size":1412,"mtime":1614948198262,"results":"19","hashOfConfig":"14"},{"size":1732,"mtime":1614948236921,"results":"20","hashOfConfig":"14"},{"size":963,"mtime":1614946386258,"results":"21","hashOfConfig":"14"},{"size":552,"mtime":1614946414043,"results":"22","hashOfConfig":"14"},{"size":1552,"mtime":1614948179018,"results":"23","hashOfConfig":"14"},{"size":3489,"mtime":1614949590099,"results":"24","hashOfConfig":"14"},{"size":1792,"mtime":1615115655693,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1yzszcv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},"C:\\scratch\\CovidTracker\\CovidTracker\\src\\index.js",[],["57","58"],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\App.js",["59","60","61","62","63"],"import React, { useEffect, useState, useContext } from \"react\";\nimport Styles from \"./SCSS/styles.module.scss\";\nimport appStateContext from \"./Shared/appState\";\nimport { observer } from \"mobx-react\";\nimport \"./SCSS/Global.scss\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Fade from \"react-reveal/Fade\";\nimport SummaryOverview from \"./map/BottomSlider/current/SummaryOverview\"\nimport moment from \"moment\";\nimport HistoricalSummaryBoard from \"./map/BottomSlider/Historical/HistoricalSummaryBoard\"\nimport SwitchMode from \"./map/TopSlider/SwitchMode\"\nimport Map from \"./map/Map\"\n\n//root container that hold everything \nconst App = () => {\n\n  const appState = useContext(appStateContext);\n  //opens and closes bottom slider\n  const [OpenSummary, SetOpenSummary] = useState(false);\n  //switches between historical and current mode\n  const [ChangeMode, SetChangeMode] = useState(\"Current\");\n  //opens top slider\n  const [OpenChangeMode, SetOpenChangeMode] = useState(false);\n  //keeps track of the slider date for historical mode\n  const [SelectedDate, SetSelectedDate] = useState(\"1/22/20\");\n  //checks if the infected flag is set for historical mode\n  const [InfectedOn, SetInfectedOn] = useState(true)\n  //checks if the recovered flag is set for historical mode\n  const [RecoveredOn, SetRecoveredOn] = useState(false)\n  //checks if the dead flag is set for historical mode\n  const [DeathOn, SetDeathOn] = useState(false)\n\n\n  //gets data\n  useEffect(() => {\n    appState.GetCovidData();\n  }, []);\n\n  //opens top slider and sets some animations\n  const OpenSliders = () => {\n   \n   //animations for the arrow \n    if (OpenChangeMode) {\n      document\n        .getElementsByClassName(\n          Styles.OpenCloseArrowTop\n        )[0]\n        .setAttribute(\"style\", \"top:\" + \"0px !important\");\n    } else {\n      document\n        .getElementsByClassName(\n          Styles.OpenCloseArrowTop\n        )[0]\n        .setAttribute(\"style\", \"top:\" + \"100px !important\");\n    }\n\n    SetOpenChangeMode(!OpenChangeMode);\n\n  }\n\n\n  //opens bottom slider and sets some animations\n  const OpenBottomSlider = () => {\n    \n    //animations for the arrow \n    if (OpenSummary) {\n      document\n        .getElementsByClassName(\n          Styles.OpenCloseArrowBottom\n        )[0]\n        .setAttribute(\"style\", \"bottom:\" + \"0px !important\")\n        SetOpenSummary(false)\n    } else {\n      document\n        .getElementsByClassName(\n          Styles.OpenCloseArrowBottom\n        )[0]\n        .setAttribute(\"style\", \"bottom:\" + \"185px !important\")\n        SetOpenSummary(true)\n    }\n\n    \n\n  }\n\n  \n  //update dates at user sliders historical slider\n  const HandleSliderUpdate = (value) => {\n    SetSelectedDate(moment(value).format(\"M/D/YY\"));\n  };\n\n  //switches on infected mode in historical mode\n  const toggleInfectedData = () => SetInfectedOn(!InfectedOn)\n  \n //switches on recovered mode in historical mode\n  const toggleRecoveredData = () =>   SetRecoveredOn(!RecoveredOn)\n //switches on death mode in historical mode\n  const toggleDeathData = () =>   SetDeathOn(!DeathOn)\n\n\n  //resets the historical mode settings to default and changes the mode\n  const ChangeModeFunc = (ModeToChange) => {\n\n    if (ModeToChange === \"Current\") {\n      SetSelectedDate(\"1/22/20\")\n      SetDeathOn(false)\n      SetRecoveredOn(false)\n      SetInfectedOn(true)\n\n    }\n    SetChangeMode(ModeToChange)\n  }\n\n  return (\n    <>\n      <div className={Styles.container}>\n        \n              <SwitchMode\n              OpenBottomSlider={OpenBottomSlider}\n              ChangeModeFunc={ChangeModeFunc}\n                ChangeMode={ChangeMode}\n                OpenSummary={OpenSummary}\n                OpenChangeMode={OpenChangeMode}\n              />\n \n        <IconButton\n          onClick={() => {\n            OpenSliders()\n          }}\n          classes={{ root: Styles.OpenCloseArrowTop }}\n        >\n          {\" \"}\n          {OpenChangeMode ? <ArrowUpwardIcon /> : <ArrowDownwardIcon />}\n        </IconButton>\n\n\n\n\n              <Map \n              RecoveredOn={RecoveredOn}\n              ChangeMode={ChangeMode}\n              InfectedOn={InfectedOn}\n              SelectedDate={SelectedDate}\n              DeathOn={DeathOn}\n              />\n    \n    \n    \n    \n    \n    \n        <div>\n          <IconButton\n            onClick={() => {\n              OpenBottomSlider()\n            }}\n            classes={{ root: Styles.OpenCloseArrowBottom }}\n          >\n            {\" \"}\n            {OpenSummary ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n          </IconButton>\n\n          <Fade bottom when={OpenSummary}>\n            <div className={Styles.SummaryDashboard}>\n              {ChangeMode === \"Historical\" ? (\n                         \n                         <HistoricalSummaryBoard  \n                         SelectedDate={SelectedDate}\n                         HandleSliderUpdate = {HandleSliderUpdate}\n                         InfectedOn={InfectedOn}\n                         toggleInfectedData={toggleInfectedData}\n                         RecoveredOn={RecoveredOn}\n                         toggleRecoveredData={toggleRecoveredData}\n                         DeathOn={DeathOn}\n                         toggleDeathData={toggleDeathData}\n\n                         />    \n                           \n                         ) : (\n          \n                      <SummaryOverview\n                      appState = {appState}\n                      />\n                \n              )}\n            </div>\n          </Fade>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default observer(App);\n","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\appState.js",["64","65"],"import { observable, action, computed } from \"mobx\";\nimport { ApiCall } from \"./ApiCall\";\nimport { createContext } from \"react\";\nimport Papa from \"papaparse\";\n\n\n//contains the state for the application\nclass AppState {\n  //stores current country covid stats\n  @observable CovidData = [];\n  //stores overall global summary stats\n  @observable SummaryData = {};\n  //stores historical infected stats\n  @observable HistoricalInfected = { data: [] };\n  //stores historical recovered stats\n  @observable HistoricalRecovered = [];\n  //stores historical deaths stats\n  @observable HistoricalDeaths = [];\n  GetCovidData = () => {\n    \n      //gets current covid data \n    ApiCall(\"Get\", \"https://corona.lmao.ninja/v2/countries\").then((results) => {\n      this.CovidData = results;\n    });\n\n    //gets overall global statistics for bottom slidersmmary\n\n    ApiCall(\"Get\", \"https://corona.lmao.ninja/v2/all\").then((results) => {\n      this.SummaryData = results;\n    });\n\n    //get historical circle data for infected\n    ApiCall(\n      \"Get\",\n      \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\n    ).then((results) => {\n      this.HistoricalInfected = Papa.parse(results, { header: true });\n      console.log(Papa.parse(results, { header: true }));\n    });\n     //get historical circle data for recovered\n    ApiCall(\n      \"Get\",\n      \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv\"\n    ).then((results) => {\n      console.log(Papa.parse(results, { header: true }))\n      this.HistoricalRecovered = Papa.parse(results, { header: true });\n    });\n\n    //get historical circle data for deaths\n    ApiCall(\n      \"Get\",\n      \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\"\n    ).then((results) => {\n      this.HistoricalDeaths = Papa.parse(results, { header: true });\n    });\n  };\n}\n\nconst appStateContext = createContext(new AppState());\nexport default appStateContext;\n","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\ApiCall.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\BottomSlider\\current\\SummaryOverview.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\BottomSlider\\Historical\\HistoricalSummaryBoard.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\TopSlider\\SwitchMode.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\BottomSlider\\current\\SummaryTotal.js",["66","67","68"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n\r\n//component serves as the top row square in the buttom slider\r\nconst SummaryTotal = (props) => {\r\n  return (\r\n    <Grid item xs={4}>\r\n      {\" \"}\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        <NumberFormat\r\n          value={props.data.MainData}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          decimalScale={2}\r\n        />\r\n      </Typography>\r\n      <strong> Total {props.data.DataType} </strong>\r\n      <p>\r\n        {\" \"}\r\n        <NumberFormat\r\n          value={props.data.PerMillion}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          decimalScale={2}\r\n        />\r\n        <strong> per 1 million </strong>\r\n      </p>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SummaryTotal;\r\n","C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\BottomSlider\\current\\SummaryGeneral.js",[],["69","70"],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\BottomSlider\\Historical\\DateSlider.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\Map.js",["71","72"],"import {useContext} from \"react\"\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Circles from \"./Circles\";\r\nimport Styles from \"../SCSS/styles.module.scss\"\r\nimport { MapContainer, TileLayer, Marker, Popup, Tooltip } from \"react-leaflet\";\r\nimport leaflet from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appStateContext from \"../Shared/appState\"\r\nimport { observer } from \"mobx-react\";\r\n\r\n\r\n//container that holds the map and all the sliders.\r\nconst Map = (props) => {\r\n        const appState = useContext(appStateContext)\r\nreturn (\r\n    <MapContainer\r\n    maxBoundsViscosity={0.95}\r\n    attributionControl={false}\r\n    center={[0, 0]}\r\n    zoom={2}\r\n    scrollWheelZoom={false}\r\n    maxBounds={[\r\n      [-180, -90],\r\n      [180, 90]\r\n    ]}\r\n    \r\n\r\n  >\r\n    <TileLayer\r\n      attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>'\r\n      url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\"\r\n    />\r\n\r\n{props.ChangeMode === \"Historical\" ? \r\n\r\n\r\n<>\r\n\r\n  <Circles\r\n      data={props.InfectedOn  ?  appState.HistoricalInfected.data : []}\r\n      date={props.SelectedDate}\r\n      color=\"red\"\r\n      Type=\"infected\"\r\n\r\n    />  \r\n\r\n\r\n<Circles\r\n      data={props.RecoveredOn ? appState.HistoricalRecovered.data : []}\r\n      date={props.SelectedDate}\r\n      color=\"green\"\r\n      Type=\"recovered\"\r\n    />\r\n\r\n\r\n\r\n<Circles\r\n    data={props.DeathOn ? appState.HistoricalDeaths.data : []}\r\n    date={props.SelectedDate}\r\n    color=\"white\"\r\n    Type=\"deaths\"\r\n  /> \r\n</>\r\n     :  appState.CovidData.map((country) => {\r\n   \r\n\r\n      return (\r\n        <Marker\r\n          icon={leaflet.divIcon({\r\n            className: \"custom_iconTEST\",\r\n            html: `<div \r\n  \r\n            class=${Styles.custom_icon}>\r\n          \r\n            ${parseInt(country.active / 1000)}K </div>`\r\n          })}\r\n          position={[country.countryInfo.lat, country.countryInfo.long]}\r\n        >\r\n          <Tooltip offset={[17, -2]} direction=\"top\">\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              <img\r\n                className={Styles.CountryFlag}\r\n                src={country.countryInfo.flag}\r\n              />\r\n              {country.country}\r\n            </Typography>\r\n\r\n            <div>\r\n              <Typography display=\"inline\" variant=\"button\" gutterBottom>\r\n                Active:{\" \"}\r\n              </Typography>\r\n\r\n              <Typography display=\"inline\" variant=\"body2\" gutterBottom>\r\n                {parseInt(country.active).toLocaleString()}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div>\r\n              <Typography display=\"inline\" variant=\"button\" gutterBottom>\r\n                Recovered:{\" \"}\r\n              </Typography>\r\n              <Typography display=\"inline\" variant=\"body2\" gutterBottom>\r\n                {parseInt(country.recovered).toLocaleString()}\r\n              </Typography>\r\n            </div>\r\n            <div>\r\n              <Typography display=\"inline\" variant=\"button\" gutterBottom>\r\n                Deaths:{\" \"}\r\n              </Typography>\r\n              <Typography display=\"inline\" variant=\"body2\" gutterBottom>\r\n                {parseInt(country.deaths).toLocaleString()}\r\n              </Typography>\r\n            </div>\r\n          </Tooltip>\r\n        </Marker>\r\n      );\r\n    })\r\n     \r\n     \r\n     \r\n     }\r\n\r\n  </MapContainer>\r\n)\r\n\r\n\r\n}\r\n\r\n\r\nexport default observer(Map)","C:\\scratch\\CovidTracker\\CovidTracker\\src\\map\\Circles.js",["73","74","75","76","77"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Circle, Tooltip } from \"react-leaflet\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n\r\n\r\n//component responisble for displaying the circles on a map\r\nconst Circles = (props) => {\r\n\r\n  //renders label for each function\r\n  const RenderLabel = () => {\r\n        if (props.Type === \"infected\") {\r\n          return \"Infected:\"\r\n\r\n        } else if (props.Type === \"recovered\") {\r\n          return \"Recovered:\"\r\n\r\n        } else {\r\n            return \"Deaths:\"\r\n\r\n        }\r\n\r\n\r\n  }\r\n\r\n  //returns circle on the map\r\n  return props.data.map((row, i) => {\r\n    if (row[props.date] <= 0) {\r\n      // No cases on this date\r\n      return;\r\n    }\r\n    if (row[\"Lat\"] != null && row[\"Long\"] != null) {\r\n      return (\r\n        \r\n       \r\n        <Circle\r\n          key={i}\r\n          center={[row[\"Lat\"], row[\"Long\"]]}\r\n          radius={550 * Math.sqrt(row[props.date])}\r\n          fillOpacity={0.5}\r\n          fillColor={props.color}\r\n          stroke={false}\r\n        >\r\n        \r\n        <Tooltip direction=\"right\">\r\n        <Typography variant=\"h5\" gutterBottom>\r\n        {row[\"Country/Region\"]}\r\n      </Typography>\r\n\r\n\r\n      <Typography variant=\"subtitle2\" gutterBottom>\r\n        <strong>{RenderLabel()} </strong> \r\n        <NumberFormat\r\n                        value={row[props.date]}\r\n                        displayType={\"text\"}\r\n                        thousandSeparator={true}\r\n                       \r\n                        suffix=\" \"\r\n                      />\r\n   \r\n      </Typography>\r\n\r\n                \r\n              \r\n            \r\n               \r\n        </Tooltip>\r\n\r\n        </Circle>\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nexport default Circles;\r\n",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":39,"column":6,"nodeType":"84","endLine":39,"endColumn":8,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":50,"column":39,"nodeType":"88","messageId":"89","endLine":50,"endColumn":40},{"ruleId":"86","severity":1,"message":"87","line":56,"column":39,"nodeType":"88","messageId":"89","endLine":56,"endColumn":40},{"ruleId":"86","severity":1,"message":"87","line":73,"column":42,"nodeType":"88","messageId":"89","endLine":73,"endColumn":43},{"ruleId":"86","severity":1,"message":"87","line":80,"column":42,"nodeType":"88","messageId":"89","endLine":80,"endColumn":43},{"ruleId":"90","severity":1,"message":"91","line":1,"column":22,"nodeType":"92","messageId":"93","endLine":1,"endColumn":28},{"ruleId":"90","severity":1,"message":"94","line":1,"column":30,"nodeType":"92","messageId":"93","endLine":1,"endColumn":38},{"ruleId":"90","severity":1,"message":"95","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"96","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"97","line":1,"column":38,"nodeType":"92","messageId":"93","endLine":1,"endColumn":48},{"ruleId":"78","replacedBy":"98"},{"ruleId":"80","replacedBy":"99"},{"ruleId":"90","severity":1,"message":"100","line":5,"column":43,"nodeType":"92","messageId":"93","endLine":5,"endColumn":48},{"ruleId":"101","severity":1,"message":"102","line":81,"column":15,"nodeType":"103","endLine":84,"endColumn":17},{"ruleId":"90","severity":1,"message":"95","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"96","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"97","line":1,"column":38,"nodeType":"92","messageId":"93","endLine":1,"endColumn":48},{"ruleId":"104","severity":1,"message":"105","line":28,"column":34,"nodeType":"106","messageId":"107","endLine":28,"endColumn":36},{"ruleId":"104","severity":1,"message":"108","line":31,"column":7,"nodeType":"109","messageId":"110","endLine":31,"endColumn":14},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'appState'. Either include it or remove the dependency array.","ArrayExpression",["113"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'action' is defined but never used.","Identifier","unusedVar","'computed' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useContext' is defined but never used.",["111"],["112"],"'Popup' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},"Update the dependencies array to be: [appState]",{"range":"116","text":"117"},[1634,1636],"[appState]"]