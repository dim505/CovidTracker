[{"C:\\scratch\\CovidTracker\\src\\index.js":"1","C:\\scratch\\CovidTracker\\src\\App.js":"2","C:\\scratch\\CovidTracker\\src\\Shared\\appState.js":"3","C:\\scratch\\CovidTracker\\src\\Shared\\ApiCall.js":"4"},{"size":230,"mtime":1613931096000,"results":"5","hashOfConfig":"6"},{"size":5065,"mtime":1613931096000,"results":"7","hashOfConfig":"6"},{"size":568,"mtime":1613931096000,"results":"8","hashOfConfig":"6"},{"size":963,"mtime":1613931096000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"4ftfjh",{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"C:\\scratch\\CovidTracker\\src\\index.js",[],["21","22"],"C:\\scratch\\CovidTracker\\src\\App.js",["23","24","25","26"],"import React, { useEffect, useState, useContext } from \"react\";\nimport Styles from \"./styles.module.scss\";\nimport { MapContainer, TileLayer, Marker, Popup, Tooltip } from \"react-leaflet\";\nimport leaflet from \"leaflet\";\nimport appStateContext from \"./Shared/appState\";\nimport \"leaflet/dist/leaflet.css\";\nimport { observer } from \"mobx-react\";\nimport \"./Global.scss\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst App = () => {\n  const appState = useContext(appStateContext);\n\n  useEffect(() => {\n    appState.GetCovidData();\n  }, []);\n\n  return (\n    <>\n      <div>\n        <MapContainer center={[0, 0]} zoom={2} scrollWheelZoom={false}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>'\n            url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\"\n          />\n          {appState.CovidData.map((country) => {\n            return (\n              <Marker\n                icon={leaflet.divIcon({\n                  className: \"custom_icon\",\n                  html: `<div \n        \n                  class=\"_src_styles_module__custom_icon\">\n                \n                  ${parseInt(country.active / 1000)}K </div>`\n                })}\n                position={[country.countryInfo.lat, country.countryInfo.long]}\n              >\n                <Tooltip offset={[17, -2]} direction=\"top\">\n                  <Typography variant=\"h6\" gutterBottom>\n                    <img\n                      className={Styles.CountryFlag}\n                      src={country.countryInfo.flag}\n                    />\n                    {country.country}\n                  </Typography>\n\n                  <div>\n                    <Typography display=\"inline\" variant=\"button\" gutterBottom>\n                      Active:{\" \"}\n                    </Typography>\n\n                    <Typography display=\"inline\" variant=\"body2\" gutterBottom>\n                      {parseInt(country.active).toLocaleString()}\n                    </Typography>\n                  </div>\n\n                  <div>\n                    <Typography display=\"inline\" variant=\"button\" gutterBottom>\n                      Recovered:{\" \"}\n                    </Typography>\n                    <Typography display=\"inline\" variant=\"body2\" gutterBottom>\n                      {parseInt(country.recovered).toLocaleString()}\n                    </Typography>\n                  </div>\n                  <div>\n                    <Typography display=\"inline\" variant=\"button\" gutterBottom>\n                      Deaths:{\" \"}\n                    </Typography>\n                    <Typography display=\"inline\" variant=\"body2\" gutterBottom>\n                      {parseInt(country.deaths).toLocaleString()}\n                    </Typography>\n                  </div>\n                </Tooltip>\n              </Marker>\n            );\n          })}\n        </MapContainer>\n\n        <div className={Styles.SummaryDashboard}>\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Grid item xs={4}>\n              {\" \"}\n              <Typography variant=\"h5\" gutterBottom>\n                {\" \"}\n                {appState.SummaryData.cases}{\" \"}\n              </Typography>\n              <strong> Total cases </strong>\n              <p>\n                {\" \"}\n                {appState.SummaryData.casesPerOneMillion}\n                <strong> per 1 million </strong>\n              </p>\n            </Grid>\n\n            <Grid item xs={4}>\n              {\" \"}\n              <Typography variant=\"h5\" gutterBottom>\n                {\" \"}\n                {appState.SummaryData.deaths}{\" \"}\n              </Typography>\n              <strong> Total deaths </strong>\n              <p>\n                {appState.SummaryData.deathsPerOneMillion}{\" \"}\n                <strong> per 1 million </strong>\n              </p>\n            </Grid>\n            <Grid item xs={4}>\n              <Typography variant=\"h5\" gutterBottom>\n                {\" \"}\n                {appState.SummaryData.tests}{\" \"}\n              </Typography>\n              <strong> Total Tests </strong>\n              <p>\n                {\" \"}\n                {appState.SummaryData.testsPerOneMillion}{\" \"}\n                <strong> per 1 million </strong>\n              </p>\n            </Grid>\n          </Grid>\n\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Grid item xs={4}>\n              <p> {appState.SummaryData.active}</p>\n              <strong> Active Cases </strong>\n            </Grid>\n\n            <Grid item xs={4}>\n              <p> {appState.SummaryData.critical}</p>\n              <strong> Critical Cases </strong>\n            </Grid>\n\n            <Grid item xs={4}>\n              <p>{appState.SummaryData.recovered}</p>\n              <strong> Recovered Cases </strong>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default observer(App);\n","C:\\scratch\\CovidTracker\\src\\Shared\\appState.js",["27","28"],"import { observable, action, computed } from \"mobx\";\nimport { ApiCall } from \"./ApiCall\";\nimport { createContext } from \"react\";\n\nclass AppState {\n  @observable CovidData = [];\n  @observable SummaryData = {};\n  GetCovidData = () => {\n    ApiCall(\"Get\", \"https://corona.lmao.ninja/v2/countries\").then((results) => {\n      this.CovidData = results;\n    });\n\n    ApiCall(\"Get\", \"https://corona.lmao.ninja/v2/all\").then((results) => {\n      this.SummaryData = results;\n    });\n  };\n}\n\nconst appStateContext = createContext(new AppState());\nexport default appStateContext;\n","C:\\scratch\\CovidTracker\\src\\Shared\\ApiCall.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":28,"nodeType":"35","messageId":"36","endLine":1,"endColumn":36},{"ruleId":"33","severity":1,"message":"37","line":3,"column":43,"nodeType":"35","messageId":"36","endLine":3,"endColumn":48},{"ruleId":"38","severity":1,"message":"39","line":17,"column":6,"nodeType":"40","endLine":17,"endColumn":8,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":42,"column":21,"nodeType":"44","endLine":45,"endColumn":23},{"ruleId":"33","severity":1,"message":"45","line":1,"column":22,"nodeType":"35","messageId":"36","endLine":1,"endColumn":28},{"ruleId":"33","severity":1,"message":"46","line":1,"column":30,"nodeType":"35","messageId":"36","endLine":1,"endColumn":38},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Popup' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'appState'. Either include it or remove the dependency array.","ArrayExpression",["49"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'action' is defined but never used.","'computed' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [appState]",{"range":"52","text":"53"},[588,590],"[appState]"]