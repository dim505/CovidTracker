[{"C:\\scratch\\CovidTracker\\CovidTracker\\src\\index.js":"1","C:\\scratch\\CovidTracker\\CovidTracker\\src\\App.js":"2","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\appState.js":"3","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\ApiCall.js":"4","C:\\scratch\\CovidTracker\\CovidTracker\\src\\SummaryTotal.js":"5","C:\\scratch\\CovidTracker\\CovidTracker\\src\\SummaryGeneral.js":"6","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Circles.js":"7","C:\\scratch\\CovidTracker\\CovidTracker\\src\\DateSlider.js":"8"},{"size":230,"mtime":1614359664000,"results":"9","hashOfConfig":"10"},{"size":8658,"mtime":1614343565346,"results":"11","hashOfConfig":"10"},{"size":1651,"mtime":1614359664000,"results":"12","hashOfConfig":"10"},{"size":963,"mtime":1614359664000,"results":"13","hashOfConfig":"10"},{"size":898,"mtime":1614359664000,"results":"14","hashOfConfig":"10"},{"size":484,"mtime":1614359664000,"results":"15","hashOfConfig":"10"},{"size":628,"mtime":1614359664000,"results":"16","hashOfConfig":"10"},{"size":1455,"mtime":1614359664000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1yzszcv",{"filePath":"21","messages":"22","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\scratch\\CovidTracker\\CovidTracker\\src\\index.js",[],["39","40"],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\App.js",["41","42","43","44","45","46","47","48","49"],"import React, { useEffect, useState, useContext } from \"react\";\nimport Styles from \"./styles.module.scss\";\nimport { MapContainer, TileLayer, Marker, Popup, Tooltip } from \"react-leaflet\";\nimport leaflet from \"leaflet\";\nimport appStateContext from \"./Shared/appState\";\nimport \"leaflet/dist/leaflet.css\";\nimport { observer } from \"mobx-react\";\nimport \"./Global.scss\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Fade from \"react-reveal/Fade\";\nimport SummaryTotal from \"./SummaryTotal\";\nimport SummaryGeneral from \"./SummaryGeneral\";\nimport Button from \"@material-ui/core/Button\";\nimport DateSlider from \"./DateSlider\";\nimport Circles from \"./Circles\";\n\nconst App = () => {\n  const appState = useContext(appStateContext);\n  const [OpenSummary, SetOpenSummary] = useState(false);\n  //historical\n  const [ChangeMode, SetChangeMode] = useState(\"Current\");\n  const [OpenChangeMode, SetOpenChangeMode] = useState(false);\n  const [SelectedDate, SetSelectedDate] = useState(\"01/22/2020\");\n\n  useEffect(() => {\n    appState.GetCovidData();\n  }, []);\n\n  const HandleSliderUpdate = (value) => {\n    SetSelectedDate(value);\n  };\n\n  return (\n    <>\n      <div className={Styles.container}>\n        <Fade top when={OpenChangeMode}>\n          <div className={Styles.SwitchMode}>\n            {\" \"}\n            <Typography variant=\"h5\" gutterBottom>\n              Switch Modes\n            </Typography>\n            <Button\n              onClick={() => SetChangeMode(\"Current\")}\n              classes={{\n                root:\n                  ChangeMode === \"Current\"\n                    ? Styles.ActiveButton\n                    : Styles.InactiveButton\n              }}\n              variant=\"outlined\"\n            >\n              Current Data\n            </Button>\n            <Button\n              onClick={() => SetChangeMode(\"Historical\")}\n              classes={{\n                root:\n                  ChangeMode === \"Historical\"\n                    ? Styles.ActiveButton\n                    : Styles.InactiveButton\n              }}\n              variant=\"outlined\"\n            >\n              Historical Data\n            </Button>\n          </div>\n        </Fade>\n        <IconButton\n          onClick={() => {\n            if (OpenChangeMode) {\n              document\n                .getElementsByClassName(\n                  \"_src_styles_module__OpenCloseArrowTop\"\n                )[0]\n                .setAttribute(\"style\", \"top:\" + \"0px !important\");\n            } else {\n              document\n                .getElementsByClassName(\n                  \"_src_styles_module__OpenCloseArrowTop\"\n                )[0]\n                .setAttribute(\"style\", \"top:\" + \"100px !important\");\n            }\n\n            SetOpenChangeMode(!OpenChangeMode);\n          }}\n          classes={{ root: Styles.OpenCloseArrowTop }}\n        >\n          {\" \"}\n          {OpenChangeMode ? <ArrowUpwardIcon /> : <ArrowDownwardIcon />}\n        </IconButton>\n        <MapContainer\n          attributionControl={false}\n          center={[0, 0]}\n          zoom={3}\n          scrollWheelZoom={false}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>'\n            url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\"\n          />\n\n          <Circles\n            data={appState.HistoricalInfected.data}\n            date={SelectedDate}\n            color=\"red\"\n          />\n        </MapContainer>{\" \"}\n        <div>\n          <IconButton\n            onClick={() => {\n              if (OpenSummary) {\n                document\n                  .getElementsByClassName(\n                    \"_src_styles_module__OpenCloseArrowBottom\"\n                  )[0]\n                  .setAttribute(\"style\", \"bottom:\" + \"0px !important\");\n              } else {\n                document\n                  .getElementsByClassName(\n                    \"_src_styles_module__OpenCloseArrowBottom\"\n                  )[0]\n                  .setAttribute(\"style\", \"bottom:\" + \"185px !important\");\n              }\n\n              SetOpenSummary(!OpenSummary);\n            }}\n            classes={{ root: Styles.OpenCloseArrowBottom }}\n          >\n            {\" \"}\n            {OpenSummary ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\n          </IconButton>\n\n          <Fade bottom when={OpenSummary}>\n            <div className={Styles.SummaryDashboard}>\n              {ChangeMode === \"Historical\" ? (\n                <DateSlider HandleSliderUpdate={HandleSliderUpdate} />\n              ) : (\n                <>\n                  <Grid container justify=\"center\" alignItems=\"center\">\n                    <SummaryTotal\n                      data={{\n                        MainData: appState.SummaryData.cases,\n                        DataType: \"cases\",\n                        PerMillion: appState.SummaryData.casesPerOneMillion\n                      }}\n                    />\n\n                    <SummaryTotal\n                      data={{\n                        MainData: appState.SummaryData.deaths,\n                        DataType: \"deaths\",\n                        PerMillion: appState.SummaryData.deathsPerOneMillion\n                      }}\n                    />\n\n                    <SummaryTotal\n                      data={{\n                        MainData: appState.SummaryData.tests,\n                        DataType: \"Tests\",\n                        PerMillion: appState.SummaryData.testsPerOneMillion\n                      }}\n                    />\n                  </Grid>\n                  <Grid container justify=\"center\" alignItems=\"center\">\n                    <SummaryGeneral\n                      data={{\n                        MainData: appState.SummaryData.active,\n                        DataType: \"Active\"\n                      }}\n                    />\n\n                    <SummaryGeneral\n                      data={{\n                        MainData: appState.SummaryData.critical,\n                        DataType: \"Critical\"\n                      }}\n                    />\n\n                    <SummaryGeneral\n                      data={{\n                        MainData: appState.SummaryData.recovered,\n                        DataType: \"Recovered\"\n                      }}\n                    />\n                  </Grid>\n                </>\n              )}\n            </div>\n          </Fade>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default observer(App);\n","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\appState.js",["50","51"],"import { observable, action, computed } from \"mobx\";\nimport { ApiCall } from \"./ApiCall\";\nimport { createContext } from \"react\";\nimport Papa from \"papaparse\";\n\nclass AppState {\n  @observable CovidData = [];\n  @observable SummaryData = {};\n  @observable HistoricalInfected = { data: [] };\n  @observable HistoricalRecovered = [];\n  @observable HistoricalDeaths = [];\n  GetCovidData = () => {\n    ApiCall(\"Get\", \"https://corona.lmao.ninja/v2/countries\").then((results) => {\n      this.CovidData = results;\n    });\n\n    ApiCall(\"Get\", \"https://corona.lmao.ninja/v2/all\").then((results) => {\n      this.SummaryData = results;\n    });\n\n    ApiCall(\n      \"Get\",\n      \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\n    ).then((results) => {\n      this.HistoricalInfected = Papa.parse(results, { header: true });\n      console.log(Papa.parse(results, { header: true }));\n    });\n\n    ApiCall(\n      \"Get\",\n      \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv\"\n    ).then((results) => {\n      this.HistoricalRecovered = Papa.parse(results, { header: true });\n    });\n\n    ApiCall(\n      \"Get\",\n      \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\"\n    ).then((results) => {\n      this.HistoricalDeaths = Papa.parse(results, { header: true });\n    });\n  };\n}\n\nconst appStateContext = createContext(new AppState());\nexport default appStateContext;\n","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\ApiCall.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\SummaryTotal.js",["52","53","54"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst SummaryTotal = (props) => {\r\n  return (\r\n    <Grid item xs={4}>\r\n      {\" \"}\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        <NumberFormat\r\n          value={props.data.MainData}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          decimalScale={2}\r\n        />\r\n      </Typography>\r\n      <strong> Total {props.data.DataType} </strong>\r\n      <p>\r\n        {\" \"}\r\n        <NumberFormat\r\n          value={props.data.PerMillion}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          decimalScale={2}\r\n        />\r\n        <strong> per 1 million </strong>\r\n      </p>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SummaryTotal;\r\n","C:\\scratch\\CovidTracker\\CovidTracker\\src\\SummaryGeneral.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\Circles.js",["55","56","57","58","59"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport {  Circle } from \"react-leaflet\";\r\n\r\nconst Circles = (props) => {\r\n  return props.data.map((row, i) => {\r\n    if (row[props.date] <= 0) {\r\n      // No cases on this date\r\n      return;\r\n    }\r\n    if (row[\"Lat\"] != null && row[\"Long\"] != null) {\r\n      return (\r\n        <Circle\r\n          key={i}\r\n          center={[row[\"Lat\"], row[\"Long\"]]}\r\n          radius={1000 * Math.sqrt(row[props.date])}\r\n          fillOpacity={0.5}\r\n          fillColor={props.color}\r\n          stroke={false}\r\n        />\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nexport default Circles;\r\n","C:\\scratch\\CovidTracker\\CovidTracker\\src\\DateSlider.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":3,"column":35,"nodeType":"66","messageId":"67","endLine":3,"endColumn":41},{"ruleId":"64","severity":1,"message":"68","line":3,"column":43,"nodeType":"66","messageId":"67","endLine":3,"endColumn":48},{"ruleId":"64","severity":1,"message":"69","line":3,"column":50,"nodeType":"66","messageId":"67","endLine":3,"endColumn":57},{"ruleId":"64","severity":1,"message":"70","line":4,"column":8,"nodeType":"66","messageId":"67","endLine":4,"endColumn":15},{"ruleId":"71","severity":1,"message":"72","line":31,"column":6,"nodeType":"73","endLine":31,"endColumn":8,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":79,"column":47,"nodeType":"77","messageId":"78","endLine":79,"endColumn":48},{"ruleId":"75","severity":1,"message":"76","line":85,"column":47,"nodeType":"77","messageId":"78","endLine":85,"endColumn":48},{"ruleId":"75","severity":1,"message":"76","line":120,"column":52,"nodeType":"77","messageId":"78","endLine":120,"endColumn":53},{"ruleId":"75","severity":1,"message":"76","line":126,"column":52,"nodeType":"77","messageId":"78","endLine":126,"endColumn":53},{"ruleId":"64","severity":1,"message":"79","line":1,"column":22,"nodeType":"66","messageId":"67","endLine":1,"endColumn":28},{"ruleId":"64","severity":1,"message":"80","line":1,"column":30,"nodeType":"66","messageId":"67","endLine":1,"endColumn":38},{"ruleId":"64","severity":1,"message":"81","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":26},{"ruleId":"64","severity":1,"message":"82","line":1,"column":28,"nodeType":"66","messageId":"67","endLine":1,"endColumn":36},{"ruleId":"64","severity":1,"message":"83","line":1,"column":38,"nodeType":"66","messageId":"67","endLine":1,"endColumn":48},{"ruleId":"64","severity":1,"message":"81","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":26},{"ruleId":"64","severity":1,"message":"82","line":1,"column":28,"nodeType":"66","messageId":"67","endLine":1,"endColumn":36},{"ruleId":"64","severity":1,"message":"83","line":1,"column":38,"nodeType":"66","messageId":"67","endLine":1,"endColumn":48},{"ruleId":"84","severity":1,"message":"85","line":5,"column":34,"nodeType":"86","messageId":"87","endLine":5,"endColumn":36},{"ruleId":"84","severity":1,"message":"88","line":8,"column":7,"nodeType":"89","messageId":"90","endLine":8,"endColumn":14},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'Marker' is defined but never used.","Identifier","unusedVar","'Popup' is defined but never used.","'Tooltip' is defined but never used.","'leaflet' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'appState'. Either include it or remove the dependency array.","ArrayExpression",["93"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'action' is defined but never used.","'computed' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [appState]",{"range":"96","text":"97"},[1278,1280],"[appState]"]