[{"C:\\scratch\\CovidTracker\\CovidTracker\\src\\index.js":"1","C:\\scratch\\CovidTracker\\CovidTracker\\src\\App.js":"2","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\appState.js":"3","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\ApiCall.js":"4","C:\\scratch\\CovidTracker\\CovidTracker\\src\\SummaryTotal.js":"5","C:\\scratch\\CovidTracker\\CovidTracker\\src\\SummaryGeneral.js":"6","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Circles.js":"7","C:\\scratch\\CovidTracker\\CovidTracker\\src\\DateSlider.js":"8","C:\\scratch\\CovidTracker\\CovidTracker\\src\\SwitchMode.js":"9","C:\\scratch\\CovidTracker\\CovidTracker\\src\\SummaryOverview.js":"10","C:\\scratch\\CovidTracker\\CovidTracker\\src\\HistoricalSummaryBoard.js":"11","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Map.js":"12"},{"size":230,"mtime":1614359664000,"results":"13","hashOfConfig":"14"},{"size":4798,"mtime":1614773611063,"results":"15","hashOfConfig":"14"},{"size":1708,"mtime":1614513258806,"results":"16","hashOfConfig":"14"},{"size":963,"mtime":1614359664000,"results":"17","hashOfConfig":"14"},{"size":898,"mtime":1614359664000,"results":"18","hashOfConfig":"14"},{"size":484,"mtime":1614359664000,"results":"19","hashOfConfig":"14"},{"size":1659,"mtime":1614515746211,"results":"20","hashOfConfig":"14"},{"size":1447,"mtime":1614517272145,"results":"21","hashOfConfig":"14"},{"size":1625,"mtime":1614773626828,"results":"22","hashOfConfig":"14"},{"size":2014,"mtime":1614685010701,"results":"23","hashOfConfig":"14"},{"size":1349,"mtime":1614774927353,"results":"24","hashOfConfig":"14"},{"size":3325,"mtime":1614688946799,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1yzszcv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"C:\\scratch\\CovidTracker\\CovidTracker\\src\\index.js",[],["55","56"],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\App.js",["57","58","59","60","61"],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\appState.js",["62","63"],"import { observable, action, computed } from \"mobx\";\nimport { ApiCall } from \"./ApiCall\";\nimport { createContext } from \"react\";\nimport Papa from \"papaparse\";\n\nclass AppState {\n  @observable CovidData = [];\n  @observable SummaryData = {};\n  @observable HistoricalInfected = { data: [] };\n  @observable HistoricalRecovered = [];\n  @observable HistoricalDeaths = [];\n  GetCovidData = () => {\n    ApiCall(\"Get\", \"https://corona.lmao.ninja/v2/countries\").then((results) => {\n      this.CovidData = results;\n    });\n\n    ApiCall(\"Get\", \"https://corona.lmao.ninja/v2/all\").then((results) => {\n      this.SummaryData = results;\n    });\n\n    ApiCall(\n      \"Get\",\n      \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\n    ).then((results) => {\n      this.HistoricalInfected = Papa.parse(results, { header: true });\n      console.log(Papa.parse(results, { header: true }));\n    });\n\n    ApiCall(\n      \"Get\",\n      \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv\"\n    ).then((results) => {\n      console.log(Papa.parse(results, { header: true }))\n      this.HistoricalRecovered = Papa.parse(results, { header: true });\n    });\n\n    ApiCall(\n      \"Get\",\n      \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\"\n    ).then((results) => {\n      this.HistoricalDeaths = Papa.parse(results, { header: true });\n    });\n  };\n}\n\nconst appStateContext = createContext(new AppState());\nexport default appStateContext;\n","C:\\scratch\\CovidTracker\\CovidTracker\\src\\Shared\\ApiCall.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\SummaryTotal.js",["64","65","66"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst SummaryTotal = (props) => {\r\n  return (\r\n    <Grid item xs={4}>\r\n      {\" \"}\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        <NumberFormat\r\n          value={props.data.MainData}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          decimalScale={2}\r\n        />\r\n      </Typography>\r\n      <strong> Total {props.data.DataType} </strong>\r\n      <p>\r\n        {\" \"}\r\n        <NumberFormat\r\n          value={props.data.PerMillion}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          decimalScale={2}\r\n        />\r\n        <strong> per 1 million </strong>\r\n      </p>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SummaryTotal;\r\n","C:\\scratch\\CovidTracker\\CovidTracker\\src\\SummaryGeneral.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\Circles.js",["67","68","69","70","71"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Circle, Tooltip } from \"react-leaflet\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n\r\nconst Circles = (props) => {\r\n\r\n  const RenderLabel = () => {\r\n        if (props.Type === \"infected\") {\r\n          return \"Infected:\"\r\n\r\n        } else if (props.Type === \"recovered\") {\r\n          return \"Recovered:\"\r\n\r\n        } else {\r\n            return \"Deaths:\"\r\n\r\n        }\r\n\r\n\r\n  }\r\n  return props.data.map((row, i) => {\r\n    if (row[props.date] <= 0) {\r\n      // No cases on this date\r\n      return;\r\n    }\r\n    if (row[\"Lat\"] != null && row[\"Long\"] != null) {\r\n      return (\r\n        \r\n       \r\n        <Circle\r\n          key={i}\r\n          center={[row[\"Lat\"], row[\"Long\"]]}\r\n          radius={650 * Math.sqrt(row[props.date])}\r\n          fillOpacity={0.5}\r\n          fillColor={props.color}\r\n          stroke={false}\r\n        >\r\n        \r\n        <Tooltip direction=\"right\">\r\n        <Typography variant=\"h5\" gutterBottom>\r\n        {row[\"Country/Region\"]}\r\n      </Typography>\r\n\r\n\r\n      <Typography variant=\"subtitle2\" gutterBottom>\r\n        <strong>{RenderLabel()} </strong> \r\n        <NumberFormat\r\n                        value={row[props.date]}\r\n                        displayType={\"text\"}\r\n                        thousandSeparator={true}\r\n                       \r\n                        suffix=\" \"\r\n                      />\r\n   \r\n      </Typography>\r\n\r\n                \r\n              \r\n            \r\n               \r\n        </Tooltip>\r\n\r\n        </Circle>\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nexport default Circles;\r\n","C:\\scratch\\CovidTracker\\CovidTracker\\src\\DateSlider.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\SwitchMode.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\SummaryOverview.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\HistoricalSummaryBoard.js",[],"C:\\scratch\\CovidTracker\\CovidTracker\\src\\Map.js",["72","73"],"import {useContext} from \"react\"\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Circles from \"./Circles\";\r\nimport Styles from \"./styles.module.scss\"\r\nimport { MapContainer, TileLayer, Marker, Popup, Tooltip } from \"react-leaflet\";\r\nimport leaflet from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport appStateContext from \"./Shared/appState\"\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst Map = (props) => {\r\n        const appState = useContext(appStateContext)\r\nreturn (\r\n    <MapContainer\r\n    attributionControl={false}\r\n    center={[0, 0]}\r\n    zoom={3}\r\n    scrollWheelZoom={false}\r\n  >\r\n    <TileLayer\r\n      attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>'\r\n      url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\"\r\n    />\r\n\r\n{props.ChangeMode === \"Historical\" ? \r\n\r\n\r\n<>\r\n\r\n  <Circles\r\n      data={props.InfectedOn  ?  appState.HistoricalInfected.data : []}\r\n      date={props.SelectedDate}\r\n      color=\"red\"\r\n      Type=\"infected\"\r\n\r\n    />  \r\n\r\n\r\n<Circles\r\n      data={props.RecoveredOn ? appState.HistoricalRecovered.data : []}\r\n      date={props.SelectedDate}\r\n      color=\"green\"\r\n      Type=\"recovered\"\r\n    />\r\n\r\n\r\n\r\n<Circles\r\n    data={props.DeathOn ? appState.HistoricalDeaths.data : []}\r\n    date={props.SelectedDate}\r\n    color=\"white\"\r\n    Type=\"deaths\"\r\n  /> \r\n</>\r\n     :  appState.CovidData.map((country) => {\r\n   \r\n\r\n      return (\r\n        <Marker\r\n          icon={leaflet.divIcon({\r\n            className: \"custom_iconTEST\",\r\n            html: `<div \r\n  \r\n            class=${Styles.custom_icon}>\r\n          \r\n            ${parseInt(country.active / 1000)}K </div>`\r\n          })}\r\n          position={[country.countryInfo.lat, country.countryInfo.long]}\r\n        >\r\n          <Tooltip offset={[17, -2]} direction=\"top\">\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              <img\r\n                className={Styles.CountryFlag}\r\n                src={country.countryInfo.flag}\r\n              />\r\n              {country.country}\r\n            </Typography>\r\n\r\n            <div>\r\n              <Typography display=\"inline\" variant=\"button\" gutterBottom>\r\n                Active:{\" \"}\r\n              </Typography>\r\n\r\n              <Typography display=\"inline\" variant=\"body2\" gutterBottom>\r\n                {parseInt(country.active).toLocaleString()}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div>\r\n              <Typography display=\"inline\" variant=\"button\" gutterBottom>\r\n                Recovered:{\" \"}\r\n              </Typography>\r\n              <Typography display=\"inline\" variant=\"body2\" gutterBottom>\r\n                {parseInt(country.recovered).toLocaleString()}\r\n              </Typography>\r\n            </div>\r\n            <div>\r\n              <Typography display=\"inline\" variant=\"button\" gutterBottom>\r\n                Deaths:{\" \"}\r\n              </Typography>\r\n              <Typography display=\"inline\" variant=\"body2\" gutterBottom>\r\n                {parseInt(country.deaths).toLocaleString()}\r\n              </Typography>\r\n            </div>\r\n          </Tooltip>\r\n        </Marker>\r\n      );\r\n    })\r\n     \r\n     \r\n     \r\n     }\r\n\r\n  </MapContainer>\r\n)\r\n\r\n\r\n}\r\n\r\n\r\nexport default observer(Map)",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":30,"column":6,"nodeType":"80","endLine":30,"endColumn":8,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":39,"column":39,"nodeType":"84","messageId":"85","endLine":39,"endColumn":40},{"ruleId":"82","severity":1,"message":"83","line":45,"column":39,"nodeType":"84","messageId":"85","endLine":45,"endColumn":40},{"ruleId":"82","severity":1,"message":"83","line":58,"column":42,"nodeType":"84","messageId":"85","endLine":58,"endColumn":43},{"ruleId":"82","severity":1,"message":"83","line":65,"column":42,"nodeType":"84","messageId":"85","endLine":65,"endColumn":43},{"ruleId":"86","severity":1,"message":"87","line":1,"column":22,"nodeType":"88","messageId":"89","endLine":1,"endColumn":28},{"ruleId":"86","severity":1,"message":"90","line":1,"column":30,"nodeType":"88","messageId":"89","endLine":1,"endColumn":38},{"ruleId":"86","severity":1,"message":"91","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"92","line":1,"column":28,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},{"ruleId":"86","severity":1,"message":"93","line":1,"column":38,"nodeType":"88","messageId":"89","endLine":1,"endColumn":48},{"ruleId":"86","severity":1,"message":"91","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"92","line":1,"column":28,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},{"ruleId":"86","severity":1,"message":"93","line":1,"column":38,"nodeType":"88","messageId":"89","endLine":1,"endColumn":48},{"ruleId":"94","severity":1,"message":"95","line":23,"column":34,"nodeType":"96","messageId":"97","endLine":23,"endColumn":36},{"ruleId":"94","severity":1,"message":"98","line":26,"column":7,"nodeType":"99","messageId":"100","endLine":26,"endColumn":14},{"ruleId":"86","severity":1,"message":"101","line":5,"column":43,"nodeType":"88","messageId":"89","endLine":5,"endColumn":48},{"ruleId":"102","severity":1,"message":"103","line":72,"column":15,"nodeType":"104","endLine":75,"endColumn":17},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'appState'. Either include it or remove the dependency array.","ArrayExpression",["107"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'action' is defined but never used.","Identifier","unusedVar","'computed' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'Popup' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},"Update the dependencies array to be: [appState]",{"range":"110","text":"111"},[1181,1183],"[appState]"]